{"ast":null,"code":"import InstantSearch from \"instantsearch.js/es/lib/InstantSearch.js\";\nimport { useCallback, useMemo, version as ReactVersion } from 'react';\nimport { useSyncExternalStore } from \"use-sync-external-store/shim/index.js\";\nimport { useInstantSearchServerContext } from \"./useInstantSearchServerContext.js\";\nimport { useInstantSearchSSRContext } from \"./useInstantSearchSSRContext.js\";\nimport version from \"../version.js\";\nimport { useForceUpdate } from \"./useForceUpdate.js\";\nimport { useStableValue } from \"./useStableValue.js\";\nvar defaultUserAgents = [\"react (\".concat(ReactVersion, \")\"), \"react-instantsearch (\".concat(version, \")\"), \"react-instantsearch-hooks (\".concat(version, \")\")];\nexport function useInstantSearchApi(props) {\n  var forceUpdate = useForceUpdate();\n  var serverContext = useInstantSearchServerContext();\n  var serverState = useInstantSearchSSRContext();\n  var initialResults = serverState === null || serverState === void 0 ? void 0 : serverState.initialResults;\n  var stableProps = useStableValue(props);\n  var search = useMemo(function () {\n    var instance = new InstantSearch(stableProps);\n\n    if (serverContext || initialResults) {\n      // InstantSearch.js has a private Initial Results API that lets us inject\n      // results on the search instance.\n      // On the server, we default the initial results to an empty object so that\n      // InstantSearch.js doesn't schedule a search that isn't used, leading to\n      // an additional network request. (This is equivalent to monkey-patching\n      // `scheduleSearch` to a noop.)\n      instance._initialResults = initialResults || {};\n    }\n\n    addAlgoliaAgents(props.searchClient, [].concat(defaultUserAgents, [serverContext && \"react-instantsearch-server (\".concat(version, \")\")]));\n    return instance;\n  }, [initialResults, props.searchClient, serverContext, stableProps]);\n  var store = useSyncExternalStore(useCallback(function () {\n    // On SSR, the instance is already started so we don't start it again here.\n    if (!search.started) {\n      search.start();\n      forceUpdate();\n    }\n\n    return function () {\n      search.dispose();\n    };\n  }, [forceUpdate, search]), function () {\n    return search;\n  }, function () {\n    return search;\n  });\n\n  if (!search.started) {\n    // On the server, we start the search early to compute the search parameters.\n    // On SSR, we start the search early to directly catch up with the lifecycle\n    // and render.\n    if (serverContext || initialResults) {\n      search.start();\n    }\n\n    if (serverContext) {\n      // We notify `getServerState()` of the InstantSearch internals to retrieve\n      // the server state and pass it to the render on SSR.\n      serverContext.notifyServer({\n        search: search\n      });\n    }\n  }\n\n  return store;\n}\n\nfunction addAlgoliaAgents(searchClient, userAgents) {\n  if (typeof searchClient.addAlgoliaAgent !== 'function') {\n    return;\n  }\n\n  userAgents.filter(Boolean).forEach(function (userAgent) {\n    searchClient.addAlgoliaAgent(userAgent);\n  });\n}","map":{"version":3,"names":["InstantSearch","useCallback","useMemo","version","ReactVersion","useSyncExternalStore","useInstantSearchServerContext","useInstantSearchSSRContext","useForceUpdate","useStableValue","defaultUserAgents","concat","useInstantSearchApi","props","forceUpdate","serverContext","serverState","initialResults","stableProps","search","instance","_initialResults","addAlgoliaAgents","searchClient","store","started","start","dispose","notifyServer","userAgents","addAlgoliaAgent","filter","Boolean","forEach","userAgent"],"sources":["/Users/christoalex/Algolia/my-app/node_modules/react-instantsearch-hooks/dist/es/lib/useInstantSearchApi.js"],"sourcesContent":["import InstantSearch from \"instantsearch.js/es/lib/InstantSearch.js\";\nimport { useCallback, useMemo, version as ReactVersion } from 'react';\nimport { useSyncExternalStore } from \"use-sync-external-store/shim/index.js\";\nimport { useInstantSearchServerContext } from \"./useInstantSearchServerContext.js\";\nimport { useInstantSearchSSRContext } from \"./useInstantSearchSSRContext.js\";\nimport version from \"../version.js\";\nimport { useForceUpdate } from \"./useForceUpdate.js\";\nimport { useStableValue } from \"./useStableValue.js\";\nvar defaultUserAgents = [\"react (\".concat(ReactVersion, \")\"), \"react-instantsearch (\".concat(version, \")\"), \"react-instantsearch-hooks (\".concat(version, \")\")];\nexport function useInstantSearchApi(props) {\n  var forceUpdate = useForceUpdate();\n  var serverContext = useInstantSearchServerContext();\n  var serverState = useInstantSearchSSRContext();\n  var initialResults = serverState === null || serverState === void 0 ? void 0 : serverState.initialResults;\n  var stableProps = useStableValue(props);\n  var search = useMemo(function () {\n    var instance = new InstantSearch(stableProps);\n\n    if (serverContext || initialResults) {\n      // InstantSearch.js has a private Initial Results API that lets us inject\n      // results on the search instance.\n      // On the server, we default the initial results to an empty object so that\n      // InstantSearch.js doesn't schedule a search that isn't used, leading to\n      // an additional network request. (This is equivalent to monkey-patching\n      // `scheduleSearch` to a noop.)\n      instance._initialResults = initialResults || {};\n    }\n\n    addAlgoliaAgents(props.searchClient, [].concat(defaultUserAgents, [serverContext && \"react-instantsearch-server (\".concat(version, \")\")]));\n    return instance;\n  }, [initialResults, props.searchClient, serverContext, stableProps]);\n  var store = useSyncExternalStore(useCallback(function () {\n    // On SSR, the instance is already started so we don't start it again here.\n    if (!search.started) {\n      search.start();\n      forceUpdate();\n    }\n\n    return function () {\n      search.dispose();\n    };\n  }, [forceUpdate, search]), function () {\n    return search;\n  }, function () {\n    return search;\n  });\n\n  if (!search.started) {\n    // On the server, we start the search early to compute the search parameters.\n    // On SSR, we start the search early to directly catch up with the lifecycle\n    // and render.\n    if (serverContext || initialResults) {\n      search.start();\n    }\n\n    if (serverContext) {\n      // We notify `getServerState()` of the InstantSearch internals to retrieve\n      // the server state and pass it to the render on SSR.\n      serverContext.notifyServer({\n        search: search\n      });\n    }\n  }\n\n  return store;\n}\n\nfunction addAlgoliaAgents(searchClient, userAgents) {\n  if (typeof searchClient.addAlgoliaAgent !== 'function') {\n    return;\n  }\n\n  userAgents.filter(Boolean).forEach(function (userAgent) {\n    searchClient.addAlgoliaAgent(userAgent);\n  });\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}